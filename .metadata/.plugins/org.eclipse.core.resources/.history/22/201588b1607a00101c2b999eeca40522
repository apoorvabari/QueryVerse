package com.example.courses;

import java.util.List;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.openfeign.EnableFeignClients; // Added import
import org.springframework.context.annotation.Bean;

import com.example.courses.model.Course;
import com.example.courses.model.Subject;
import com.example.courses.repository.CourseRepository;
import com.example.courses.repository.SubjectRepository;

@SpringBootApplication
@EnableFeignClients
public class CourseServiceApplication {

    public static void main(String[] args) {
        SpringApplication.run(CourseServiceApplication.class, args);
    }

    @Bean
    CommandLineRunner initData(CourseRepository courseRepo, SubjectRepository subjectRepo) {
        return args -> {
            try {
                // Initialize courses with their subjects
                createCourseWithSubjects(courseRepo, subjectRepo, "DBDA",
                        List.of("Data Structures", "Database Systems", "Machine Learning", "Web Technologies", "Cloud Computing"));
                createCourseWithSubjects(courseRepo, subjectRepo, "Embedded",
                        List.of("Microcontrollers", "RTOS", "Embedded C", "IoT Systems"));
                createCourseWithSubjects(courseRepo, subjectRepo, "DAC",
                        List.of("Java Programming", "Spring Boot", "Hibernate", "REST APIs"));
                createCourseWithSubjects(courseRepo, subjectRepo, "Electronics",
                        List.of("Analog Circuits", "Digital Electronics", "VLSI Design", "Signal Processing"));
                System.out.println("Database initialized successfully with courses and subjects.");
            } catch (Exception e) {
                System.err.println("Failed to initialize database: " + e.getMessage());
                throw e; // Rethrow to halt startup if critical
            }
        };
    }

    private void createCourseWithSubjects(CourseRepository courseRepo, SubjectRepository subjectRepo,
                                         String courseName, List<String> subjectTitles) {
        // Create and save course
        Course course = new Course();
        course.setName(courseName);
        courseRepo.save(course); // Save course first to generate ID

        // Create and save subjects
        List<Subject> subjects = subjectTitles.stream().map(title -> {
            Subject subject = new Subject();
            subject.setTitle(title);
            subject.setCourse(course);
            return subject;
        }).toList();

        subjectRepo.saveAll(subjects); // Explicitly save subjects
        course.setSubjects(subjects);
        courseRepo.save(course); // Update course with subjects
    }
}