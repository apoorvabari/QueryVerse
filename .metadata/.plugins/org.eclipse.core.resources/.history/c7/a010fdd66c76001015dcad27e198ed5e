package com.example.courses.controller;

import com.example.courses.model.Course;
import com.example.courses.model.Subject;
import com.example.courses.service.CourseService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/courses") // Base path for all course-related endpoints
public class CourseController {

    @Autowired
    private CourseService courseService;

    // --- GET Operations ---

    // Get all courses
    // GET http://localhost:8080/api/courses
    @GetMapping
    public List<Course> getAllCourses() {
        return courseService.getAllCourses();
    }

    // Get a single course by its ID
    // GET http://localhost:8080/api/courses/{id} (e.g., http://localhost:8080/api/courses/1)
    @GetMapping("/{id}")
    public ResponseEntity<Course> getCourseById(@PathVariable Long id) {
        Course course = courseService.getCourseById(id);
        if (course != null) {
            return ResponseEntity.ok(course);
        } else {
            return ResponseEntity.notFound().build(); // 404 Not Found if course doesn't exist
        }
    }

    // Get all subjects for a specific course
    // GET http://localhost:8080/api/courses/{courseId}/subjects (e.g., http://localhost:8080/api/courses/1/subjects)
    @GetMapping("/{courseId}/subjects")
    public ResponseEntity<List<Subject>> getSubjectsByCourseId(@PathVariable Long courseId) {
        Course course = courseService.getCourseById(courseId);
        if (course != null) {
            return ResponseEntity.ok(course.getSubjects());
        } else {
            return ResponseEntity.notFound().build(); // 404 Not Found if course doesn't exist
        }
    }
    
    
    // Get a specific subject by its ID within a specific course
    // GET http://localhost:8080/api/courses/{courseId}/subjects/{subjectId} (e.g., http://localhost:8080/api/courses/1/subjects/2)
    @GetMapping("/{courseId}/subjects/{subjectId}")
    public ResponseEntity<Subject> getSubjectByCourseAndSubjectId(
            @PathVariable Long courseId,
            @PathVariable Long subjectId) {
        
        Subject subject = courseService.getSubjectByCourseAndSubjectId(courseId, subjectId);
        if (subject != null) {
            return ResponseEntity.ok(subject);
        } else {
            return ResponseEntity.notFound().build(); // 404 Not Found if course or subject not found
        }
    }

    // --- POST Operations ---

    // Create a new course
    // POST http://localhost:8080/api/courses
    @PostMapping
    public Course createCourse(@RequestBody Course course) {
        return courseService.createCourse(course);
    }
    
 // Method to add to your CourseController
    @PostMapping("/{courseId}/subjects")
    public ResponseEntity<Subject> addSubjectToCourse(
            @PathVariable Long courseId,
            @RequestBody Subject subjectDetails) {
        
        Subject newSubject = courseService.addSubjectToCourse(courseId, subjectDetails);
        if (newSubject != null) {
            return ResponseEntity.ok(newSubject); // Or ResponseEntity.status(HttpStatus.CREATED).body(newSubject);
        } else {
            return ResponseEntity.notFound().build(); // Course not found
        }
    }

    // --- PUT Operations ---

    // Update an existing course
    // PUT http://localhost:8080/api/courses/{id}
    @PutMapping("/{id}")
    public ResponseEntity<Course> updateCourse(@PathVariable Long id, @RequestBody Course courseDetails) {
        Course updatedCourse = courseService.updateCourse(id, courseDetails);
        if (updatedCourse != null) {
            return ResponseEntity.ok(updatedCourse); // 200 OK with updated course
        } else {
            return ResponseEntity.notFound().build(); // 404 Not Found if course doesn't exist
        }
    }

    // --- DELETE Operations ---

    // Delete a course by its ID
    // DELETE http://localhost:8080/api/courses/{id}
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteCourse(@PathVariable Long id) {
        boolean deleted = courseService.deleteCourse(id);
        if (deleted) {
            return ResponseEntity.noContent().build(); // 204 No Content for successful deletion
        } else {
            return ResponseEntity.notFound().build(); // 404 Not Found if course doesn't exist
        }
    }
}