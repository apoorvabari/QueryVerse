package com.example.courses.controller;

import com.example.courses.model.Subject;
import com.example.courses.service.SubjectService;
import jakarta.validation.Valid;
import jakarta.validation.constraints.Positive;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import java.net.URI;
import java.util.List;

@RestController
@RequestMapping("/api/subjects") // Base path for subject-related endpoints
public class SubjectController {

    @Autowired
    private SubjectService subjectService;

    // --- GET Operations ---

    // Get all subjects
    // GET /api/subjects
    @GetMapping
    public ResponseEntity<List<Subject>> getAllSubjects() {
        List<Subject> subjects = subjectService.getAllSubjects();
        return ResponseEntity.ok(subjects);
    }

    // Get a single subject by its ID
    // GET /api/subjects/{id}
    @GetMapping("/{id}")
    public ResponseEntity<Subject> getSubjectById(@PathVariable @Positive Long id) {
        Subject subject = subjectService.getSubjectById(id);
        if (subject != null) {
            return ResponseEntity.ok(subject);
        }
        return ResponseEntity.notFound().build(); // 404 Not Found
    }

    // --- POST Operations ---

    // Create a new subject
    // POST /api/subjects
    @PostMapping
    public ResponseEntity<Subject> createSubject(@Valid @RequestBody Subject subject) {
        Subject createdSubject = subjectService.createSubject(subject);
        URI location = ServletUriComponentsBuilder.fromCurrentRequest()
                .path("/{id}")
                .buildAndExpand(createdSubject.getId())
                .toUri();
        return ResponseEntity.created(location).body(createdSubject); // 201 Created
    }

    // --- PUT Operations ---

    // Update an existing subject
    // PUT /api/subjects/{id}
    @PutMapping("/{id}")
    public ResponseEntity<Subject> updateSubject(
            @PathVariable @Positive Long id,
            @Valid @RequestBody Subject subjectDetails) {
        Subject updatedSubject = subjectService.updateSubject(id, subjectDetails);
        if (updatedSubject != null) {
            return ResponseEntity.ok(updatedSubject); // 200 OK
        }
        return ResponseEntity.notFound().build(); // 404 Not Found
    }

    // --- DELETE Operations ---

    // Delete a subject by its ID
    // DELETE /api/subjects/{id}
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteSubject(@PathVariable @Positive Long id) {
        boolean deleted = subjectService.deleteSubject(id);
        if (deleted) {
            return ResponseEntity.noContent().build(); // 204 No Content
        }
        return ResponseEntity.notFound().build(); // 404 Not Found
    }
}