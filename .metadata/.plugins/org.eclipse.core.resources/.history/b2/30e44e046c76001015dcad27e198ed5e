package com.example.courses.service;

import com.example.courses.model.Course;
import com.example.courses.model.Subject;
import com.example.courses.repository.CourseRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional; // Import Optional for .flatMap()

@Service
public class CourseService {

    @Autowired
    private CourseRepository courseRepository;

    // --- GET Operations ---

    public List<Course> getAllCourses() {
        return courseRepository.findAll();
    }

    public Course getCourseById(Long id) {
        return courseRepository.findById(id).orElse(null);
    }

    // New method to get a specific subject by its ID within a specific course
    public Subject getSubjectByCourseAndSubjectId(Long courseId, Long subjectId) {
        // Find the course first
        Optional<Course> optionalCourse = courseRepository.findById(courseId);

        // If the course exists, then stream through its subjects to find the one with the matching subjectId
        return optionalCourse.flatMap(course ->
                course.getSubjects().stream()
                      .filter(subject -> subject.getId().equals(subjectId))
                      .findFirst() // Get the first matching subject (Optional<Subject>)
        ).orElse(null); // Return the subject or null if not found
    }

    // --- POST Operations ---

    public Course createCourse(Course course) {
        // Ensure the bidirectional relationship is set before saving
        if (course.getSubjects() != null) {
            course.getSubjects().forEach(subject -> subject.setCourse(course));
        }
        return courseRepository.save(course);
    }

    // --- PUT Operations ---

    public Course updateCourse(Long id, Course courseDetails) {
        return courseRepository.findById(id).map(course -> {
            course.setName(courseDetails.getName());
            // This calls the setSubjects method in the Course entity, which handles the bidirectional relationship
            if (courseDetails.getSubjects() != null) {
                course.setSubjects(courseDetails.getSubjects());
            }
            return courseRepository.save(course);
        }).orElse(null); // Returns null if the course to update is not found
    }

    // --- DELETE Operations ---

    public boolean deleteCourse(Long id) {
        if (courseRepository.existsById(id)) {
            courseRepository.deleteById(id);
            return true;
        }
        return false;
    }
}