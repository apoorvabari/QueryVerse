package com.example.courses.test;

import com.example.courses.client.CourseFeignClient;
import com.example.courses.model.Course;
import com.example.courses.model.Subject;
import feign.FeignException;
import jakarta.validation.constraints.Positive;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import java.net.URI;
import java.util.List;

@RestController
@RequestMapping("/api/feign-test") // Base path for testing Feign client endpoints
public class FeignClientTestController {

    @Autowired
    private CourseFeignClient courseFeignClient;

    // --- GET Operations ---

    // Test getting all courses via Feign
    // GET /api/feign-test/courses
    @GetMapping("/courses")
    public ResponseEntity<List<Course>> getAllCoursesViaFeign() {
        try {
            List<Course> courses = courseFeignClient.getAllCourses();
            return ResponseEntity.ok(courses);
        } catch (FeignException.NotFound ex) {
            return ResponseEntity.notFound().build(); // 404 Not Found
        } catch (FeignException ex) {
            return ResponseEntity.status(ex.status()).build(); // Other Feign errors
        }
    }

    // Test getting a single course by ID via Feign
    // GET /api/feign-test/courses/{id}
    @GetMapping("/courses/{id}")
    public ResponseEntity<Course> getCourseByIdViaFeign(@PathVariable @Positive Long id) {
        try {
            Course course = courseFeignClient.getCourseById(id);
            return ResponseEntity.ok(course);
        } catch (FeignException.NotFound ex) {
            return ResponseEntity.notFound().build(); // 404 Not Found
        } catch (FeignException ex) {
            return ResponseEntity.status(ex.status()).build(); // Other Feign errors
        }
    }

    // Test getting all subjects for a specific course via Feign
    // GET /api/feign-test/courses/{courseId}/subjects
    @GetMapping("/courses/{courseId}/subjects")
    public ResponseEntity<List<Subject>> getSubjectsByCourseIdViaFeign(@PathVariable @Positive Long courseId) {
        try {
            List<Subject> subjects = courseFeignClient.getSubjectsByCourseId(courseId);
            return ResponseEntity.ok(subjects); // Allow empty list for valid course
        } catch (FeignException.NotFound ex) {
            return ResponseEntity.notFound().build(); // 404 Not Found
        } catch (FeignException ex) {
            return ResponseEntity.status(ex.status()).build(); // Other Feign errors
        }
    }

    // Test getting a specific subject by ID within a course via Feign
    // GET /api/feign-test/courses/{courseId}/subjects/{subjectId}
    @GetMapping("/courses/{courseId}/subjects/{subjectId}")
    public ResponseEntity<Subject> getSubjectByCourseAndSubjectIdViaFeign(
            @PathVariable @Positive Long courseId,
            @PathVariable @Positive Long subjectId) {
        try {
            Subject subject = courseFeignClient.getSubjectByCourseAndSubjectId(courseId, subjectId);
            return ResponseEntity.ok(subject);
        } catch (FeignException.NotFound ex) {
            return ResponseEntity.notFound().build(); // 404 Not Found
        } catch (FeignException ex) {
            return ResponseEntity.status(ex.status()).build(); // Other Feign errors
        }
    }

    // --- POST Operations ---

    // Test creating a new course via Feign
    // POST /api/feign-test/courses
    @PostMapping("/courses")
    public ResponseEntity<Course> createCourseViaFeign(@RequestBody @Valid Course course) {
        try {
            Course createdCourse = courseFeignClient.createCourse(course);
            URI location = ServletUriComponentsBuilder.fromCurrentRequest()
                    .path("/{id}")
                    .buildAndExpand(createdCourse.getId())
                    .toUri();
            return ResponseEntity.created(location).body(createdCourse); // 201 Created
        } catch (FeignException.BadRequest ex) {
            return ResponseEntity.badRequest().build(); // 400 Bad Request
        } catch (FeignException ex) {
            return ResponseEntity.status(ex.status()).build(); // Other Feign errors
        }
    }

    // Test adding a subject to a course via Feign
    // POST /api/feign-test/courses/{courseId}/subjects
    @PostMapping("/courses/{courseId}/subjects")
    public ResponseEntity<Subject> addSubjectToCourseViaFeign(
            @PathVariable @Positive Long courseId,
            @RequestBody @Valid Subject subjectDetails) {
        try {
            Subject newSubject = courseFeignClient.addSubjectToCourse(courseId, subjectDetails);
            URI location = ServletUriComponentsBuilder.fromCurrentRequest()
                    .path("/{subjectId}")
                    .buildAndExpand(newSubject.getId())
                    .toUri();
            return ResponseEntity.created(location).body(newSubject); // 201 Created
        } catch (FeignException.NotFound ex) {
            return ResponseEntity.notFound().build(); // 404 Not Found
        } catch (FeignException.BadRequest ex) {
            return ResponseEntity.badRequest().build(); // 400 Bad Request
        } catch (FeignException ex) {
            return ResponseEntity.status(ex.status()).build(); // Other Feign errors
        }
    }

    // --- PUT Operations ---

    // Test updating a course via Feign
    // PUT /api/feign-test/courses/{id}
    @PutMapping("/courses/{id}")
    public ResponseEntity<Course> updateCourseViaFeign(
            @PathVariable @Positive Long id,
            @RequestBody @Valid Course courseDetails) {
        try {
            Course updatedCourse = courseFeignClient.updateCourse(id, courseDetails);
            return ResponseEntity.ok(updatedCourse); // 200 OK
        } catch (FeignException.NotFound ex) {
            return ResponseEntity.notFound().build(); // 404 Not Found
        } catch (FeignException.BadRequest ex) {
            return ResponseEntity.badRequest().build(); // 400 Bad Request
        } catch (FeignException ex) {
            return ResponseEntity.status(ex.status()).build(); // Other Feign errors
        }
    }

    // Test updating a subject in a course via Feign
    // PUT /api/feign-test/courses/{courseId}/subjects/{subjectId}
    @PutMapping("/courses/{courseId}/subjects/{subjectId}")
    public ResponseEntity<Subject> updateSubjectInCourseViaFeign(
            @PathVariable @Positive Long courseId,
            @PathVariable @Positive Long subjectId,
            @RequestBody @Valid Subject subjectDetails) {
        try {
            Subject updatedSubject = courseFeignClient.updateSubjectInCourse(courseId, subjectId, subjectDetails);
            return ResponseEntity.ok(updatedSubject); // 200 OK
        } catch (FeignException.NotFound ex) {
            return ResponseEntity.notFound().build(); // 404 Not Found
        } catch (FeignException.BadRequest ex) {
            return ResponseEntity.badRequest().build(); // 400 Bad Request
        } catch (FeignException ex) {
            return ResponseEntity.status(ex.status()).build(); // Other Feign errors
        }
    }

    // --- DELETE Operations ---

    // Test deleting a course via Feign
    // DELETE /api/feign-test/courses/{id}
    @DeleteMapping("/courses/{id}")
    public ResponseEntity<Void> deleteCourseViaFeign(@PathVariable @Positive Long id) {
        try {
            courseFeignClient.deleteCourse(id);
            return ResponseEntity.noContent().build(); // 204 No Content
        } catch (FeignException.NotFound ex) {
            return ResponseEntity.notFound().build(); // 404 Not Found
        } catch (FeignException ex) {
            return ResponseEntity.status(ex.status()).build(); // Other Feign errors
        }
    }

    // Test deleting a subject from a course via Feign
    // DELETE /api/feign-test/courses/{courseId}/subjects/{subjectId}
    @DeleteMapping("/courses/{courseId}/subjects/{subjectId}")
    public ResponseEntity<Void> deleteSubjectInCourseViaFeign(
            @PathVariable @Positive Long courseId,
            @PathVariable @Positive Long subjectId) {
        try {
            courseFeignClient.deleteSubjectInCourse(courseId, subjectId);
            return ResponseEntity.noContent().build(); // 204 No Content
        } catch (FeignException.NotFound ex) {
            return ResponseEntity.notFound().build(); // 404 Not Found
        } catch (FeignException ex) {
            return ResponseEntity.status(ex.status()).build(); // Other Feign errors
        }
    }
}