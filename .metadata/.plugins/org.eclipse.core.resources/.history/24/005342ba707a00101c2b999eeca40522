package com.example.courses.test;

import com.example.courses.client.CourseFeignClient;
import com.example.courses.model.Course;
import com.example.courses.model.Subject;
import feign.FeignException;
import jakarta.validation.Valid;
import jakarta.validation.constraints.Positive;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import java.net.URI;
import java.util.List;

@RestController
@RequestMapping("/api/feign-test")
public class FeignClientTestController {

    @Autowired
    private CourseFeignClient courseFeignClient;

    @GetMapping("/courses")
    public ResponseEntity<List<Course>> getAllCoursesViaFeign() {
        try {
            return ResponseEntity.ok(courseFeignClient.getAllCourses());
        } catch (FeignException.NotFound ex) {
            return ResponseEntity.notFound().build();
        } catch (FeignException ex) {
            return ResponseEntity.status(ex.status()).build();
        }
    }

    @GetMapping("/courses/{id}")
    public ResponseEntity<Course> getCourseByIdViaFeign(@PathVariable @Positive Long id) {
        try {
            return ResponseEntity.ok(courseFeignClient.getCourseById(id));
        } catch (FeignException.NotFound ex) {
            return ResponseEntity.notFound().build();
        } catch (FeignException ex) {
            return ResponseEntity.status(ex.status()).build();
        }
    }

    @GetMapping("/courses/{courseId}/subjects")
    public ResponseEntity<List<Subject>> getSubjectsByCourseIdViaFeign(@PathVariable @Positive Long courseId) {
        try {
            return ResponseEntity.ok(courseFeignClient.getSubjectsByCourseId(courseId));
        } catch (FeignException.NotFound ex) {
            return ResponseEntity.notFound().build();
        } catch (FeignException ex) {
            return ResponseEntity.status(ex.status()).build();
        }
    }

    @GetMapping("/courses/{courseId}/subjects/{subjectId}")
    public ResponseEntity<Subject> getSubjectByCourseAndSubjectIdViaFeign(
            @PathVariable @Positive Long courseId,
            @PathVariable @Positive Long subjectId) {
        try {
            return ResponseEntity.ok(courseFeignClient.getSubjectByCourseAndSubjectId(courseId, subjectId));
        } catch (FeignException.NotFound ex) {
            return ResponseEntity.notFound().build();
        } catch (FeignException ex) {
            return ResponseEntity.status(ex.status()).build();
        }
    }

    @PostMapping("/courses")
    public ResponseEntity<Course> createCourseViaFeign(@Valid @RequestBody Course course) {
        try {
            Course createdCourse = courseFeignClient.createCourse(course);
            URI location = ServletUriComponentsBuilder.fromCurrentRequest()
                    .path("/{id}")
                    .buildAndExpand(createdCourse.getId())
                    .toUri();
            return ResponseEntity.created(location).body(createdCourse);
        } catch (FeignException.BadRequest ex) {
            return ResponseEntity.badRequest().build();
        } catch (FeignException ex) {
            return ResponseEntity.status(ex.status()).build();
        }
    }

    @PostMapping("/courses/{courseId}/subjects")
    public ResponseEntity<Subject> addSubjectToCourseViaFeign(
            @PathVariable @Positive Long courseId,
            @Valid @RequestBody Subject subjectDetails) {
        try {
            Subject newSubject = courseFeignClient.addSubjectToCourse(courseId, subjectDetails);
            URI location = ServletUriComponentsBuilder.fromCurrentRequest()
                    .path("/{subjectId}")
                    .buildAndExpand(newSubject.getId())
                    .toUri();
            return ResponseEntity.created(location).body(newSubject);
        } catch (FeignException.NotFound ex) {
            return ResponseEntity.notFound().build();
        } catch (FeignException.BadRequest ex) {
            return ResponseEntity.badRequest().build();
        } catch (FeignException ex) {
            return ResponseEntity.status(ex.status()).build();
        }
    }

    @PutMapping("/courses/{id}")
    public ResponseEntity<Course> updateCourseViaFeign(
            @PathVariable @Positive Long id,
            @Valid @RequestBody Course courseDetails) {
        try {
            return ResponseEntity.ok(courseFeignClient.updateCourse(id, courseDetails));
        } catch (FeignException.NotFound ex) {
            return ResponseEntity.notFound().build();
        } catch (FeignException.BadRequest ex) {
            return ResponseEntity.badRequest().build();
        } catch (FeignException ex) {
            return ResponseEntity.status(ex.status()).build();
        }
    }

    @PutMapping("/courses/{courseId}/subjects/{subjectId}")
    public ResponseEntity<Subject> updateSubjectInCourseViaFeign(
            @PathVariable @Positive Long courseId,
            @PathVariable @Positive Long subjectId,
            @Valid @RequestBody Subject subjectDetails) {
        try {
            return ResponseEntity.ok(courseFeignClient.updateSubjectInCourse(courseId, subjectId, subjectDetails));
        } catch (FeignException.NotFound ex) {
            return ResponseEntity.notFound().build();
        } catch (FeignException.BadRequest ex) {
            return ResponseEntity.badRequest().build();
        } catch (FeignException ex) {
            return ResponseEntity.status(ex.status()).build();
        }
    }

    @DeleteMapping("/courses/{id}")
    public ResponseEntity<Void> deleteCourseViaFeign(@PathVariable @Positive Long id) {
        try {
            courseFeignClient.deleteCourse(id);
            return ResponseEntity.noContent().build();
        } catch (FeignException.NotFound ex) {
            return ResponseEntity.notFound().build();
        } catch (FeignException ex) {
            return ResponseEntity.status(ex.status()).build();
        }
    }

    @DeleteMapping("/courses/{courseId}/subjects/{subjectId}")
    public ResponseEntity<Void> deleteSubjectInCourseViaFeign(
            @PathVariable @Positive Long courseId,
            @PathVariable @Positive Long subjectId) {
        try {
            courseFeignClient.deleteSubjectInCourse(courseId, subjectId);
            return ResponseEntity.noContent().build();
        } catch (FeignException.NotFound ex) {
            return ResponseEntity.notFound().build();
        } catch (FeignException ex) {
            return ResponseEntity.status(ex.status()).build();
        }
    }
}