package com.example.courses.client;

import com.example.courses.model.Course;
import com.example.courses.model.Subject;
import com.example.nameservice.NameServiceClient;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;

import java.util.List;

// Feign client for interacting with the course service
// The 'name' attribute matches the service ID in discovery service (e.g., Eureka)
// Remove 'url' if using service discovery; configure via application.properties if needed
@NameServiceClient(name = "course-service")
public interface CourseFeignClient {

    // Get all courses
    // GET /api/courses
    @GetMapping("/api/courses")
    List<Course> getAllCourses();

    // Get a single course by its ID
    // GET /api/courses/{id}
    @GetMapping("/api/courses/{id}")
    Course getCourseById(@PathVariable("id") Long id);

    // Get all subjects for a specific course
    // GET /api/courses/{courseId}/subjects
    @GetMapping("/api/courses/{courseId}/subjects")
    List<Subject> getSubjectsByCourseId(@PathVariable("courseId") Long courseId);

    // Get a specific subject by its ID within a specific course
    // GET /api/courses/{courseId}/subjects/{subjectId}
    @GetMapping("/api/courses/{courseId}/subjects/{subjectId}")
    Subject getSubjectByCourseAndSubjectId(
            @PathVariable("courseId") Long courseId,
            @PathVariable("subjectId") Long subjectId);

    // Create a new course
    // POST /api/courses
    @PostMapping("/api/courses")
    Course createCourse(@RequestBody Course course);

    // Add a subject to a course
    // POST /api/courses/{courseId}/subjects
    @PostMapping("/api/courses/{courseId}/subjects")
    Subject addSubjectToCourse(
            @PathVariable("courseId") Long courseId,
            @RequestBody Subject subjectDetails);

    // Update an existing course
    // PUT /api/courses/{id}
    @PutMapping("/api/courses/{id}")
    Course updateCourse(
            @PathVariable("id") Long id,
            @RequestBody Course courseDetails);

    // Update a subject in a course
    // PUT /api/courses/{courseId}/subjects/{subjectId}
    @PutMapping("/api/courses/{courseId}/subjects/{subjectId}")
    Subject updateSubjectInCourse(
            @PathVariable("courseId") Long courseId,
            @PathVariable("subjectId") Long subjectId,
            @RequestBody Subject subjectDetails);

    // Delete a course by its ID
    // DELETE /api/courses/{id}
    @DeleteMapping("/api/courses/{id}")
    void deleteCourse(@PathVariable("id") Long id);

    // Delete a subject from a course
    // DELETE /api/courses/{courseId}/subjects/{subjectId}
    @DeleteMapping("/api/courses/{courseId}/subjects/{subjectId}")
    void deleteSubjectInCourse(
            @PathVariable("courseId") Long courseId,
            @PathVariable("subjectId") Long subjectId);
}